nano triangular_scanner.py
---------------------
python3 triangular_scanner.py
----------------------
from web3 import Web3

web3 = Web3(Web3.HTTPProvider("https://polygon-rpc.com"))

WMATIC = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270".lower()
USDC   = "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174".lower()

erc20_abi = [{
    "constant": True,
    "inputs": [],
    "name": "decimals",
    "outputs": [{"name": "", "type": "uint8"}],
    "payable": False,
    "stateMutability": "view",
    "type": "function"
}]

def get_decimals(token_addr):
    checksum_addr = Web3.to_checksum_address(token_addr)
    contract = web3.eth.contract(address=checksum_addr, abi=erc20_abi)
    return contract.functions.decimals().call()

# Alamat pair WMATIC/USDC di QuickSwap
pair_address = Web3.to_checksum_address("0x6e7a5FAFcec6BB1e78bAE2A1F0B612012BF14827")

pair_abi = [
    {
        "constant": True,
        "inputs": [],
        "name": "getReserves",
        "outputs": [
            {"internalType": "uint112", "name": "_reserve0", "type": "uint112"},
            {"internalType": "uint112", "name": "_reserve1", "type": "uint112"},
            {"internalType": "uint32", "name": "_blockTimestampLast", "type": "uint32"}
        ],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": True,
        "inputs": [],
        "name": "token0",
        "outputs": [{"internalType": "address", "name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": True,
        "inputs": [],
        "name": "token1",
        "outputs": [{"internalType": "address", "name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    }
]

pair = web3.eth.contract(address=pair_address, abi=pair_abi)

r0, r1, _ = pair.functions.getReserves().call()
t0 = pair.functions.token0().call()
t1 = pair.functions.token1().call()

# Konversi ke lowercase untuk perbandingan
t0_lower = t0.lower()
t1_lower = t1.lower()

print(f"Token0: {t0}, Reserve0: {r0}")
print(f"Token1: {t1}, Reserve1: {r1}")

dec0 = get_decimals(t0)
dec1 = get_decimals(t1)

reserve0_adj = r0 / (10 ** dec0)
reserve1_adj = r1 / (10 ** dec1)

# Hitung harga 1 WMATIC dalam USDC
if t0_lower == WMATIC:
    price = reserve1_adj / reserve0_adj
elif t1_lower == WMATIC:
    price = reserve0_adj / reserve1_adj
else:
    raise Exception("WMATIC tidak ditemukan di pair ini!")

print(f"1 WMATIC â‰ˆ {price:.6f} USDC")
